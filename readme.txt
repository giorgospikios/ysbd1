Για την δημιουργία του εκτελέσιμου το οποίο δείχνει
τις δυνατότητες της βιβλιοθήκης BF, τρέξτε την εντολή:

make bf;

Για να τρέξετε το εκτελέσιμο:

./build/bf_main

Αντίστοιχα και για τα άλλα εκτελέσιμα.
make ht;
make hp;

////////////////////////////////////////////////////////////////////////////////////////////

READ ME

Γεώργιος Πικιός sdi1900357
ΛΕΛΟΣ ΠΑΝΑΓΙΩΤΗΣ sdi2000272

ΠΑΡΑΤΗΡΗΣΗ: οταν δημιουργειται το αρχειο data.db και ξανατρεχουμε το προγραμμα λεει οτι δεν βρισκει την εγγραφη

HP
Στο αρχείο hp_file.c είναι υλοποιημένες όλες οι συναρτήσεις που ζητάει η εκφώνηση. Παρακάτω εξηγούμε με λίγα λόγια τη λειτουργία κάθε συνάρτησης:

-HP_CreateFile( char *filename):

    Αρχικά, δημιουργεί το αρχείο σωρού. 
    Έπειτα, το ανοίγει και δεσμεύει χώρο για ένα block. 
    Μετά παίρνει την διεύθυνση του πρώτου block, αρχικοποιεί τις μεταβλητές της ειδικής πληροφορίας(meta data), 
    συγκεκριμένα την πληροφορία ότι το αρχείο είναι heap και το μέγιστο πλήθος των εγγραφών που χωράνε στα blocks και τις γράφει στο block. 
    Στο τέλος κλείνει το αρχείο. 
    Επιστρέφει 0 σε επιτυχία και -1 σε αποτυχία.

-HP_info* HP_OpenFile(char *fileName, int *file_desc):

    Ανοίγει ένα αρχείο. Διαβάζει από το πρώτο block τις ειδικές πληροφορίες που έχουν γραφθεί στο πρώτο block από την CreateFile και τις αποθηκεύει στη δομή hp_info, αφού έχει επιβεβαιώσει ότι είναι αρχείο σωρού.
    Έπειτα, αρχικοποιεί τις δομές hp_info και hp_block_info με κάποια απαραίτητα στοιχεία που θα χρειαστούν παρακάτω, όπως το αναγνωριστικό του αρχείου(φαίνονται στο κώδικα) και τα βάζει στο αρχή του πρώτου block τη δομή hp_info και στο τέλος του τη δομή hp_block_info. 
    Σε περίπτωση που συμβεί οποιοδήποτε σφάλμα επιστρέφεται NULL.
    
-int HP_CloseFile( int file_desc, HP_info* header_info):

    Κλείνει το αρχείο που προσδιορίζεται μέσα στη δομή header_info και αποδεσμεύει τη μνήμη που καταλαμβάνει η δομή αυτή. 
    Σε περίπτωση που εκτελεστεί επιτυχώς, επιστρέφεται 0, ενώ σε διαφορετική περίπτωση -1.

-HP_InsertEntry(int file_desc, HP_info* header_info, Record record ):

    Περιπτώσεις που δεσμεύεται νέο block στη μνήμη:
    1. Σε περίπτωση που στο αρχείο σωρού, υπάρχει μόνο ένα block.
    2. Αν το block έχει ήδη συμπληρώσει το μέγιστο αριθμό εγγραφών του και πάει να εισαχθεί νέα εγγραφή.
    3. Αν δεν υπάρχει αρκετός ελεύθερος χώρος μέσα στο block για να εισαχθεί η εγγραφή.
    Αφού, πάρουμε το κατάλληλο block , τότε προστίθεται η εγγραφή(ανά πεδίο) σε αυτό το block. 
    Σε περίπτωση επιτυχίας επιστρέφεται ο αριθμός του block που έγινε η εισαγωγή και σε περίπτωση αποτυχίας -1.

-int HP_GetAllEntries(int file_desc, HP_info* header_info, int id):
    Βάζουμε σε ένα πίνακα χαρακτήρων την τιμή value που δίνεται(για να μπορούμε να τη συγκρίνουμε) 
    και βάζουμε σε έναν counter την αρχή των δεδομένων που δείχνει στο block. 
    Έπειτα, συγκρίνουμε χαρακτήρα-χαρακτήρα, αν ο χαρακτήρας είναι υποσύνολο(substring) του πίνακα όπου υπάρχει η τιμή value και ελέγχουμε τον επόμενο χαρακτήρα.
    Σε περίπτωση που όλοι οι χαρακτήρες είναι ίδιοι με αυτούς του πίνακα και δεν υπάρχει επιπλέον χαρακτήρας(NULL), 
    τότε βρήκαμε το id του record που έχει ζητηθεί και εκτυπώνουμε όλα τα πεδία του συγκεκριμένου record. Σε αντίθετη περίπτωση, 
    δεν βρέθηκε η εγγραφή με το id που μας δόθηκε σαν όρισμα και εκτυπώνεται αντίστοιχο μήνυμα. 
    Σε περίπτωση επιτυχίας επιστρέφεται ο αριθμός των block που διαβάστηκαν, μέχρι να βρεθεί η εγγραφή και σε περίπτωση αποτυχίας -1.
